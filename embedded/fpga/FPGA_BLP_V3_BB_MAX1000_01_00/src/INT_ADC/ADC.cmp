	component ADC is
		port (
			clk_clk                               : in  std_logic                     := 'X';             -- clk
			modular_adc_0_adc_pll_clock_clk       : in  std_logic                     := 'X';             -- clk
			modular_adc_0_adc_pll_locked_export   : in  std_logic                     := 'X';             -- export
			modular_adc_0_response_valid          : out std_logic;                                        -- valid
			modular_adc_0_response_channel        : out std_logic_vector(4 downto 0);                     -- channel
			modular_adc_0_response_data           : out std_logic_vector(11 downto 0);                    -- data
			modular_adc_0_response_startofpacket  : out std_logic;                                        -- startofpacket
			modular_adc_0_response_endofpacket    : out std_logic;                                        -- endofpacket
			modular_adc_0_sequencer_csr_address   : in  std_logic                     := 'X';             -- address
			modular_adc_0_sequencer_csr_read      : in  std_logic                     := 'X';             -- read
			modular_adc_0_sequencer_csr_write     : in  std_logic                     := 'X';             -- write
			modular_adc_0_sequencer_csr_writedata : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			modular_adc_0_sequencer_csr_readdata  : out std_logic_vector(31 downto 0);                    -- readdata
			reset_reset_n                         : in  std_logic                     := 'X'              -- reset_n
		);
	end component ADC;

